!function(o){var t={};function r(e){if(t[e])return t[e].exports;var n=t[e]={i:e,l:!1,exports:{}};return o[e].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=o,r.c=t,r.d=function(e,n,o){r.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(n,e){if(1&e&&(n=r(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var t in n)r.d(o,t,function(e){return n[e]}.bind(null,t));return o},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="",r(r.s="./src/electron.js")}({"./src/electron.js":
/*!*************************!*\
  !*** ./src/electron.js ***!
  \*************************/
/*! no exports provided */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! electron */ \"electron\");\n/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(electron__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n\n// import { enableLiveReload } from 'electron-compile';\n\n\n// Keep a global reference of the window object, if you don't, the window will\n// be closed automatically when the JavaScript object is garbage collected.\nlet mainWindow;\nlet appIcon = null;\nlet authWindow;\n// const isDevMode = process.execPath.match(/[\\\\/]electron/);\n\n// if (isDevMode) enableLiveReload({ strategy: 'react-hmr' });\n\nconst createWindow = async () => {\n  mainWindow = new electron__WEBPACK_IMPORTED_MODULE_0__[\"BrowserWindow\"]({\n    width: 1000,\n    height: 780,\n    minHeight: 650,\n    minWidth: 750,\n    show: true,\n    frame: true,\n    backgroundColor: '#f4f4f5',\n    title: 'Remotify',\n  });\n\n  // authWindow = new BrowserWindow({\n  //   width: 550,\n  //   height: 480,\n  //   show: false,\n  //   minHeight: 310,\n  //   minWidth: 310,\n  //   frame: false,\n  //   backgroundColor: '#f4f4f5',\n  //   title: 'Remotify',\n  // });\n\n  mainWindow.loadURL(`file://${__dirname}/index.html`);\n  // Open the DevTools.\n  // if (isDevMode) {\n  //   mainWindow.webContents.openDevTools();\n  // }\n\n  // authWindow.loadURL(`file://${__dirname}/login.html`);\n  // Open the DevTools.\n  // if (isDevMode) {\n  //   mainWindow.webContents.openDevTools();\n  // }\n\n  // Emitted when the window is closed.\n  mainWindow.on('closed', () => {\n    // Dereference the window object, usually you would store windows\n    // in an array if your app supports multi windows, this is the time\n    // when you should delete the corresponding element.\n    mainWindow = null;\n  });\n};\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\nelectron__WEBPACK_IMPORTED_MODULE_0__[\"app\"].on('ready', createWindow);\n\n// Quit when all windows are closed.\nelectron__WEBPACK_IMPORTED_MODULE_0__[\"app\"].on('window-all-closed', () => {\n  // On OS X it is common for applications and their menu bar\n  // to stay active until the user quits explicitly with Cmd + Q\n  if (process.platform !== 'darwin') {\n    electron__WEBPACK_IMPORTED_MODULE_0__[\"app\"].quit();\n  }\n});\n\n// console.log('hello');\n\nelectron__WEBPACK_IMPORTED_MODULE_0__[\"app\"].on('activate', () => {\n  // On OS X it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (mainWindow === null) {\n    createWindow();\n  }\n});\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and import them here.\n\nelectron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].on('authenticate-user', (event, arg) => {\n  authWindow.show();\n  mainWindow.hide();\n});\n\nelectron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].on('authenticated', (event, arg) => {\n  authWindow.hide();\n  mainWindow.show();\n});\n\nelectron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].on('create-tray', (event) => {\n  const icon = process.platform === 'win32' ? 'win.png' : 'win.png';\n  const iconPath = path__WEBPACK_IMPORTED_MODULE_1___default.a.join(__dirname, icon);\n  appIcon = new electron__WEBPACK_IMPORTED_MODULE_0__[\"Tray\"](iconPath);\n\n  const contextMenu = electron__WEBPACK_IMPORTED_MODULE_0__[\"Menu\"].buildFromTemplate([\n    {\n      label: 'Remove',\n      click: () => {\n        event.sender.send('remove-tray');\n      },\n    },\n  ]);\n\n  appIcon.setToolTip('Remotify');\n  appIcon.setContextMenu(contextMenu);\n});\n\nelectron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].on('delete-tray', (event, arg) => {\n  appIcon.destroy();\n});\n\n\n//# sourceURL=webpack:///./src/electron.js?")},electron:
/*!***************************!*\
  !*** external "electron" ***!
  \***************************/
/*! no static exports found */function(module,exports){eval('module.exports = require("electron");\n\n//# sourceURL=webpack:///external_%22electron%22?')},path:
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/*! no static exports found */function(module,exports){eval('module.exports = require("path");\n\n//# sourceURL=webpack:///external_%22path%22?')}});